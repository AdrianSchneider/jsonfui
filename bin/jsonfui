#!/usr/bin/env node
'use strict';

var fs       = require('fs');
var path     = require('path');
var program  = require('commander');
var ttys     = require('ttys');
var app      = require('../src/app');
var config   = require('../package.json');

program
  .version(config.version)
  .usage('<filename>')
  .parse(process.argv);

if(!program.args[0]) {
  program.outputHelp();
  process.exit(1);
}

var json = '';
var stream = getInputStream(resolveFilename(program.args[0]));
stream.on('data', function(data) { json += data.toString('utf-8'); });
stream.on('end', start);
stream.on('error', die);

function start() {
  try {
    openApp(JSON.parse(json));
  } catch (e) {
    die(new Error('Invalid input JSON'));
  }
}

function die(e) {
  if (e) {
    console.error(e.message);
    process.exit(1);
  }
}

function openApp(data) {
  printIfNotRecursive(data);
  app(data, ttys.stdin, process.stdout);
}

function resolveFilename(filename) {
  if (filename === '-') return filename;
  return path.resolve(process.cwd(), filename);
}

function getInputStream(filename) {
  if (filename === '-') return process.stdin;
  return fs.createReadStream(filename);
}

function printIfNotRecursive(data) {
  if (data === null || typeof data === 'string' || typeof data === 'number' || typeof data === 'boolean') {
    console.log(data);
    process.exit(0);
  }

  if (Array.isArray(data) && !data.length) {
    console.log('[] (empty array)');
    process.exit(0);
  }

  if (!Array.isArray(data) && !Object.keys(data).length) {
    console.log('{} (empty object)');
    process.exit(0);
  }
}
